{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "마케팅 랜딩페이지 구축",
        "description": "ReFlexHire 서비스를 위한 완전한 마케팅 랜딩페이지 개발 - GitHub Pages 기반 호스팅 환경에서 HTML/CSS 구조, 히어로 섹션, 가치 제안, 서비스 쇼케이스, 리드 폼을 포함한 전체 랜딩페이지 구축",
        "status": "pending",
        "dependencies": [],
        "priority": "high",
        "details": "1. GitHub Pages 호스팅 환경 구축\n   - GitHub 저장소 생성 (reflexhire-landing)\n   - GitHub Pages 설정 활성화\n   - 도메인 연결 준비 (reflexhire.com)\n\n2. 완전한 HTML/CSS 구조 개발\n   - Semantic HTML5 기반 전체 페이지 구조\n   - 모바일 우선 반응형 CSS 프레임워크\n   - 신뢰감 있는 블루 계열 컬러 팔레트\n\n3. 히어로 섹션 구현\n   - 강력한 헤드라인과 서브헤드라인\n   - CTA 버튼 및 시각적 요소\n   - 반응형 레이아웃\n\n4. 가치 제안 섹션\n   - '채용 수수료를 복지로' 핵심 메시지\n   - 3가지 주요 혜택 시각화\n   - 통계 및 수치 강조\n\n5. 서비스 쇼케이스\n   - 서비스 프로세스 단계별 설명\n   - 온보딩 패키지 미리보기\n   - 고객 성공 사례 (준비 시)\n\n6. 리드 폼 구현\n   - 기업 정보 수집 폼\n   - 유효성 검사 및 제출 처리\n   - 감사 페이지 연결\n\n7. 파트너 CTA 및 푸터\n   - 리크루터 파트너 등록 유도\n   - 연락처 및 소셜 미디어 링크\n\n```html\n<!DOCTYPE html>\n<html lang=\"ko\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ReFlexHire - 채용 수수료를 복지로</title>\n    <link rel=\"stylesheet\" href=\"css/styles.css\">\n</head>\n<body>\n    <header class=\"hero-section\">\n        <nav class=\"navbar\"></nav>\n        <div class=\"hero-content\"></div>\n    </header>\n    <section class=\"value-proposition\"></section>\n    <section class=\"service-showcase\"></section>\n    <section class=\"lead-form\"></section>\n    <section class=\"partner-cta\"></section>\n    <footer class=\"footer\"></footer>\n    <script src=\"js/main.js\"></script>\n</body>\n</html>\n```",
        "testStrategy": "1. GitHub Pages 배포 및 접속 테스트\n2. 모바일/태블릿/데스크톱 반응형 레이아웃 검증\n3. 모든 섹션의 시각적 일관성 확인\n4. 리드 폼 제출 및 유효성 검사 테스트\n5. 페이지 로딩 속도 최적화 확인\n6. 브라우저 호환성 테스트 (Chrome, Firefox, Safari, Edge)\n7. 접근성 테스트 (WAVE 도구 사용)\n8. SEO 기본 요소 검증 (메타 태그, 구조화된 데이터)\n9. CTA 버튼 및 링크 동작 확인\n10. 도메인 연결 상태 검증",
        "subtasks": [
          {
            "id": 1,
            "title": "GitHub Pages 호스팅 환경 설정",
            "description": "GitHub 저장소 생성 및 GitHub Pages 배포 환경 구축",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "기본 HTML 구조 및 CSS 프레임워크 구성",
            "description": "전체 페이지의 semantic HTML5 구조와 반응형 CSS 기반 구축",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "히어로 섹션 개발",
            "description": "강력한 첫인상을 위한 히어로 섹션 구현 (헤드라인, CTA, 시각적 요소)",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "가치 제안 섹션 구현",
            "description": "'채용 수수료를 복지로' 핵심 메시지와 3가지 주요 혜택 시각화",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "서비스 쇼케이스 섹션 개발",
            "description": "서비스 프로세스 단계별 설명 및 온보딩 패키지 미리보기",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "리드 폼 구현",
            "description": "기업 정보 수집을 위한 폼 개발 (유효성 검사 및 제출 처리 포함)",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "파트너 CTA 및 푸터 구현",
            "description": "리크루터 파트너 등록 유도 섹션 및 푸터 정보 구성",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "반응형 디자인 최적화",
            "description": "모든 디바이스에서의 완벽한 반응형 레이아웃 구현 및 테스트",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 9,
            "title": "성능 최적화 및 SEO 설정",
            "description": "페이지 로딩 속도 최적화, 메타 태그 설정, 구조화된 데이터 추가",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 10,
            "title": "최종 배포 및 도메인 연결",
            "description": "완성된 랜딩페이지의 프로덕션 배포 및 reflexhire.com 도메인 연결",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 2,
        "title": "랜딩페이지 배포 및 최적화",
        "description": "완성된 랜딩페이지를 GitHub Pages에 배포하고 SEO 최적화, 성능 최적화, 분석 도구 설정을 통해 마케팅 효과를 극대화",
        "status": "pending",
        "dependencies": [
          1
        ],
        "priority": "high",
        "details": "1. GitHub Pages 배포 설정\n   - 저장소 설정 및 배포 자동화\n   - 커스텀 도메인 연결 (reflexhire.com)\n   - HTTPS 인증서 설정\n\n2. SEO 최적화\n   - 메타 태그 최적화 (title, description, keywords)\n   - Open Graph 태그 설정 (소셜 미디어 공유)\n   - 구조화된 데이터 (JSON-LD) 구현\n   - 사이트맵 및 robots.txt 생성\n\n3. Google Analytics 설정\n   - GA4 추적 코드 설치\n   - 목표 설정 (리드 폼 제출, CTA 클릭)\n   - 이벤트 추적 구성\n\n4. 성능 최적화\n   - 이미지 최적화 및 압축\n   - CSS/JS 파일 최소화\n   - 브라우저 캐싱 설정\n   - Core Web Vitals 최적화\n\n5. 지속적인 유지보수\n   - 정기적인 성능 모니터링\n   - A/B 테스트 준비\n   - 백업 및 버전 관리",
        "testStrategy": "1. 배포 환경 접속 및 도메인 연결 테스트\n2. SEO 도구를 통한 최적화 검증 (Google Search Console, SEMrush)\n3. Google Analytics 데이터 수집 확인\n4. PageSpeed Insights 성능 점수 측정\n5. 모바일/데스크톱 Core Web Vitals 테스트\n6. 소셜 미디어 공유 미리보기 확인\n7. 검색 엔진 인덱싱 상태 모니터링",
        "subtasks": [
          {
            "id": 1,
            "title": "GitHub Pages 배포 환경 구축",
            "description": "저장소 설정, 자동 배포, 도메인 연결",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "SEO 메타 태그 및 구조화된 데이터 구현",
            "description": "검색 엔진 최적화를 위한 메타 정보 및 JSON-LD 스키마 추가",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Open Graph 태그 설정",
            "description": "소셜 미디어 공유 최적화를 위한 OG 태그 구현",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Google Analytics 4 설정",
            "description": "GA4 추적 코드 설치 및 목표 설정",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "이벤트 추적 구성",
            "description": "리드 폼 제출, CTA 클릭 등 주요 이벤트 추적 설정",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "이미지 최적화 및 압축",
            "description": "WebP 포맷 변환, 이미지 크기 최적화",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "CSS/JS 파일 최소화",
            "description": "코드 압축 및 번들링을 통한 로딩 속도 개선",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "사이트맵 및 robots.txt 생성",
            "description": "검색 엔진 크롤링 최적화를 위한 파일 생성",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 9,
            "title": "Core Web Vitals 최적화",
            "description": "LCP, FID, CLS 지표 개선을 위한 성능 튜닝",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 10,
            "title": "성능 모니터링 및 유지보수 체계 구축",
            "description": "정기적인 성능 점검 및 개선 프로세스 수립",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 11,
        "title": "프로젝트 초기 설정 및 기술 스택 구성",
        "description": "Next.js 기반 프론트엔드와 Node.js/Express.js 백엔드 환경을 구축하고, PostgreSQL 데이터베이스 및 AWS 인프라 기본 설정을 완료합니다.",
        "details": "1. Next.js 프로젝트 생성 (TypeScript 설정 포함)\n2. Express.js API 서버 구축\n3. PostgreSQL 데이터베이스 설정\n4. AWS EC2, RDS, S3 기본 인프라 구성\n5. 환경변수 관리 (.env 파일 구조)\n6. ESLint, Prettier 코드 품질 도구 설정\n7. Git 저장소 및 브랜치 전략 수립\n\n```javascript\n// package.json 예시\n{\n  \"dependencies\": {\n    \"next\": \"^14.0.0\",\n    \"express\": \"^4.18.0\",\n    \"pg\": \"^8.11.0\",\n    \"jsonwebtoken\": \"^9.0.0\"\n  }\n}\n```",
        "testStrategy": "1. 개발 환경에서 Next.js 서버 정상 구동 확인\n2. Express API 서버 헬스체크 엔드포인트 테스트\n3. 데이터베이스 연결 상태 확인\n4. AWS 리소스 접근 권한 테스트",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "사용자 인증 시스템 및 RBAC 권한 체계 구축",
        "description": "OAuth2/JWT 기반 인증 시스템을 구현하고, 기업 고객/리크루터/관리자 역할별 접근 권한을 관리하는 RBAC 시스템을 구축합니다.",
        "details": "1. JWT 토큰 기반 인증 미들웨어 구현\n2. OAuth2 소셜 로그인 연동 (Google, LinkedIn)\n3. 사용자 역할 정의: CLIENT, RECRUITER, ADMIN\n4. 권한별 라우트 보호 미들웨어\n5. 비밀번호 암호화 (bcrypt)\n6. 토큰 갱신 로직\n\n```javascript\n// 권한 체크 미들웨어\nconst checkRole = (roles) => {\n  return (req, res, next) => {\n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({ error: '접근 권한이 없습니다' });\n    }\n    next();\n  };\n};\n```",
        "testStrategy": "1. 각 역할별 로그인/로그아웃 기능 테스트\n2. JWT 토큰 유효성 검증 테스트\n3. 권한별 API 접근 제한 테스트\n4. 토큰 만료 및 갱신 시나리오 테스트",
        "priority": "high",
        "dependencies": [
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "핵심 데이터 모델 및 데이터베이스 스키마 설계",
        "description": "User, Recruiter, Job, Candidate, Vendor, OnboardingPackage 등 핵심 엔티티의 데이터베이스 스키마를 설계하고 구현합니다.",
        "details": "1. PostgreSQL 테이블 스키마 설계\n   - users (id, email, role, company_info)\n   - jobs (id, client_id, title, salary_range, status)\n   - candidates (id, job_id, recruiter_id, status)\n   - onboarding_packages (id, salary_tier, package_items)\n   - vendors (id, name, service_type, api_endpoint)\n   - orders (id, candidate_id, package_id, status)\n\n2. 관계형 데이터베이스 외래키 설정\n3. 인덱스 최적화\n4. 마이그레이션 스크립트 작성\n\n```sql\nCREATE TABLE jobs (\n  id SERIAL PRIMARY KEY,\n  client_id INTEGER REFERENCES users(id),\n  title VARCHAR(255) NOT NULL,\n  salary_range INTEGER,\n  status VARCHAR(50) DEFAULT 'active',\n  created_at TIMESTAMP DEFAULT NOW()\n);\n```",
        "testStrategy": "1. 데이터베이스 마이그레이션 실행 테스트\n2. 각 테이블 CRUD 연산 테스트\n3. 외래키 제약조건 검증\n4. 데이터 무결성 테스트",
        "priority": "high",
        "dependencies": [
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "관리자 대시보드 및 거래 관리 시스템 구현",
        "description": "관리자가 모든 채용 거래를 모니터링하고, 수동 주문 처리 및 오류 수정을 할 수 있는 관리자 패널을 구현합니다.",
        "details": "1. 관리자 전용 대시보드 UI 구성\n2. 채용 현황 실시간 모니터링 기능\n3. 수동 주문 생성 및 벤더 할당 기능\n4. 거래 상태 수정 및 오류 처리 도구\n5. 수수료 및 크레딧 수동 조정 기능\n6. 시스템 로그 및 감사 추적\n\n```javascript\n// 관리자 대시보드 API\napp.get('/admin/dashboard', checkRole(['ADMIN']), async (req, res) => {\n  const stats = await db.query(`\n    SELECT \n      COUNT(*) as total_jobs,\n      SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed_jobs\n    FROM jobs\n  `);\n  res.json(stats.rows[0]);\n});\n```",
        "testStrategy": "1. 관리자 권한으로만 접근 가능한지 확인\n2. 실시간 데이터 업데이트 테스트\n3. 수동 주문 생성 및 처리 플로우 테스트\n4. 오류 상황 처리 및 복구 테스트",
        "priority": "high",
        "dependencies": [
          12,
          13
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "채용 요청 등록 및 인재 제출 시스템 구현",
        "description": "기업 고객이 채용 요청을 등록하고, 리크루터가 후보자를 제출할 수 있는 핵심 채용 매칭 기능을 구현합니다.",
        "details": "1. 기업용 채용 요청 등록 폼\n   - 포지션 정보, 연봉 범위, 요구사항 입력\n   - 파일 업로드 (JD, 회사 소개서)\n2. 리크루터용 후보자 제출 인터페이스\n   - 이력서 업로드, 후보자 정보 입력\n   - 매칭 점수 표시\n3. 채용 진행 상태 관리 (지원→면접→최종합격)\n4. 알림 시스템 (이메일/인앱 알림)\n\n```javascript\n// 채용 요청 등록 API\napp.post('/api/jobs', checkRole(['CLIENT']), async (req, res) => {\n  const { title, salary_range, requirements } = req.body;\n  const job = await db.query(\n    'INSERT INTO jobs (client_id, title, salary_range, requirements) VALUES ($1, $2, $3, $4) RETURNING *',\n    [req.user.id, title, salary_range, requirements]\n  );\n  res.json(job.rows[0]);\n});\n```",
        "testStrategy": "1. 채용 요청 등록 및 수정 기능 테스트\n2. 리크루터의 후보자 제출 프로세스 테스트\n3. 상태 변경 및 알림 발송 테스트\n4. 파일 업로드 및 다운로드 기능 테스트",
        "priority": "high",
        "dependencies": [
          12,
          13
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "온보딩 크레딧 시스템 및 패키지 관리 구현",
        "description": "채용 완료 시 자동으로 온보딩 크레딧을 계산하고, 연봉 구간별 패키지를 선택할 수 있는 시스템을 구현합니다.",
        "details": "1. 연봉 대비 10% 수수료 자동 계산 로직\n2. 온보딩 크레딧 자동 생성 및 관리\n3. 연봉 구간별 패키지 템플릿 시스템\n   - 웰컴키트, 케이터링, 문화 적응 콘텐츠 등\n4. 패키지 커스터마이징 인터페이스\n5. 크레딧 사용 내역 추적\n\n```javascript\n// 온보딩 크레딧 계산\nconst calculateOnboardingCredit = (salary) => {\n  const fee = salary * 0.1; // 10% 수수료\n  const creditRatio = 0.3; // 수수료의 30%를 크레딧으로\n  return fee * creditRatio;\n};\n\n// 패키지 자동 매칭\nconst getPackageForSalary = (salary) => {\n  if (salary >= 100000000) return 'premium';\n  if (salary >= 50000000) return 'standard';\n  return 'basic';\n};\n```",
        "testStrategy": "1. 다양한 연봉 구간별 크레딧 계산 정확성 테스트\n2. 패키지 자동 매칭 로직 테스트\n3. 크레딧 사용 및 잔액 관리 테스트\n4. 패키지 커스터마이징 기능 테스트",
        "priority": "medium",
        "dependencies": [
          13,
          15
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "결제 및 인보이싱 시스템 구현",
        "description": "Stripe 또는 Toss 결제 연동을 통한 수수료 청구 및 자동 영수증 발행 시스템을 구현합니다.",
        "details": "1. Stripe API 연동 설정\n2. 수수료 자동 청구 시스템\n   - 채용 완료 시 자동 인보이스 생성\n   - 정액 수수료(연봉의 10%) 계산\n3. 결제 상태 관리 (대기→완료→실패)\n4. 자동 영수증 발행 및 이메일 발송\n5. 환불 처리 시스템\n6. 결제 내역 대시보드\n\n```javascript\n// Stripe 결제 처리\nconst stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\n\nconst createPaymentIntent = async (amount, clientId) => {\n  return await stripe.paymentIntents.create({\n    amount: amount * 100, // cents\n    currency: 'krw',\n    metadata: { client_id: clientId }\n  });\n};\n```",
        "testStrategy": "1. 테스트 결제 카드로 결제 플로우 테스트\n2. 인보이스 자동 생성 및 발송 테스트\n3. 결제 실패 시나리오 처리 테스트\n4. 환불 프로세스 테스트",
        "priority": "high",
        "dependencies": [
          13,
          15
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "벤더 연동 및 주문 관리 시스템 구현",
        "description": "온보딩 패키지 제공업체와의 API 연동 및 주문 상태 추적, 배송 관리 시스템을 구현합니다.",
        "details": "1. 벤더 등록 및 관리 시스템\n2. 주문 자동 생성 및 벤더 전송 API\n3. 주문 상태 실시간 추적\n   - 주문접수→제작중→배송중→완료\n4. 배송 정보 연동 및 알림\n5. 벤더별 API 훅 설정\n6. 주문 실패 시 대체 벤더 자동 할당\n\n```javascript\n// 벤더 주문 API\nconst createVendorOrder = async (packageId, deliveryInfo) => {\n  const vendor = await getVendorByPackage(packageId);\n  const orderData = {\n    items: packageId,\n    delivery_address: deliveryInfo,\n    callback_url: `${process.env.API_URL}/webhook/vendor-status`\n  };\n  \n  return await axios.post(vendor.api_endpoint, orderData, {\n    headers: { 'Authorization': `Bearer ${vendor.api_key}` }\n  });\n};\n```",
        "testStrategy": "1. 벤더 API 연동 상태 테스트\n2. 주문 생성 및 상태 업데이트 테스트\n3. 웹훅 수신 및 처리 테스트\n4. 벤더 장애 시 대체 처리 테스트",
        "priority": "medium",
        "dependencies": [
          13,
          16
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "클라이언트 및 리크루터 대시보드 구현",
        "description": "기업 고객과 리크루터가 각각 사용할 수 있는 전용 대시보드를 구현하여 채용 진행 상황과 실적을 확인할 수 있게 합니다.",
        "details": "1. 클라이언트 대시보드\n   - 채용 요청 현황 및 진행 상태\n   - 온보딩 패키지 선택 및 배송 추적\n   - 수수료 및 결제 내역\n2. 리크루터 대시보드\n   - 추천 인재 현황 및 성과\n   - 수수료 수령 내역\n   - 채용 성공률 통계\n3. 반응형 웹 디자인 (모바일/태블릿 지원)\n4. 실시간 알림 시스템\n\n```jsx\n// 클라이언트 대시보드 컴포넌트\nconst ClientDashboard = () => {\n  const [jobs, setJobs] = useState([]);\n  const [packages, setPackages] = useState([]);\n  \n  useEffect(() => {\n    fetchClientJobs().then(setJobs);\n    fetchOnboardingPackages().then(setPackages);\n  }, []);\n  \n  return (\n    <div className=\"dashboard-container\">\n      <JobStatusCard jobs={jobs} />\n      <PackageTrackingCard packages={packages} />\n    </div>\n  );\n};\n```",
        "testStrategy": "1. 각 역할별 대시보드 접근 권한 테스트\n2. 실시간 데이터 업데이트 확인\n3. 모바일/태블릿 반응형 디자인 테스트\n4. 알림 기능 동작 테스트",
        "priority": "medium",
        "dependencies": [
          12,
          15,
          16
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "시스템 보안 강화 및 배포 환경 구축",
        "description": "HTTPS, WAF, 백업 전략 등 보안 요구사항을 구현하고, AWS 기반 프로덕션 환경을 구축합니다.",
        "details": "1. HTTPS 인증서 설정 (Let's Encrypt 또는 AWS Certificate Manager)\n2. AWS WAF 설정으로 웹 애플리케이션 보호\n3. IAM 역할 기반 접근 제어\n4. 데이터베이스 백업 자동화 (RDS 스냅샷)\n5. 로그 모니터링 (CloudWatch)\n6. CI/CD 파이프라인 구축 (GitHub Actions)\n7. 환경별 배포 전략 (dev/staging/prod)\n\n```yaml\n# GitHub Actions 배포 스크립트\nname: Deploy to AWS\non:\n  push:\n    branches: [main]\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Deploy to EC2\n        run: |\n          aws s3 sync ./build s3://${{ secrets.S3_BUCKET }}\n          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_ID }}\n```",
        "testStrategy": "1. SSL 인증서 및 HTTPS 연결 테스트\n2. WAF 규칙 및 보안 정책 테스트\n3. 백업 및 복구 프로세스 테스트\n4. CI/CD 파이프라인 배포 테스트",
        "priority": "high",
        "dependencies": [
          11,
          12
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-23T21:46:26.820Z",
      "updated": "2025-07-25T19:04:01.535Z",
      "description": "Tasks for master context"
    }
  }
}